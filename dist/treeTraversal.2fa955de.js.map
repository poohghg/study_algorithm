{"version":3,"sources":["src/13.treeTraversal/treeTraversal.js"],"names":["Node","val","BST","newNode","root","currnet","left","rigth","count","current","data","queue","node","push","length","shift","travers","undefined","tree","insert","console","log","DFSinOrder"],"mappings":"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","file":"treeTraversal.2fa955de.js","sourceRoot":"..","sourcesContent":["class Node {\n  left = null;\n  rigth = null;\n  count = 0;\n  constructor(val) {\n    this.val = val;\n  }\n}\n// 바이너러 서치 트리는 검색과 삽입시 로그시간이다.\nclass BST {\n  root = null;\n\n  insert(val) {\n    const newNode = new Node(val);\n    if (!this.root) {\n      this.root = newNode;\n      return this;\n    }\n    let currnet = this.root;\n    while (true) {\n      if (val < currnet.val) {\n        if (!currnet.left) {\n          currnet.left = newNode;\n          return this;\n        }\n        currnet = currnet.left;\n      } else if (val > currnet.val) {\n        if (!currnet.rigth) {\n          currnet.rigth = newNode;\n          return this;\n        }\n        currnet = currnet.rigth;\n      } else {\n        currnet.count++;\n        return this;\n      }\n    }\n  }\n\n  find(val) {\n    if (!this.root) return null;\n    let current = this.root;\n    while (current) {\n      if (current.val === val) return true;\n      else if (val < current.val) current = current.left;\n      else current = current.rigth;\n    }\n    return false;\n  }\n  // 넓이 우선탐색\n  BFS() {\n    // 큐를 사용해 방문해야할곳의 목록을 저정하여 사용한다.\n    if (!this.root) return [];\n    let data = [],\n      queue = [],\n      node;\n    queue.push(this.root);\n    while (queue.length) {\n      node = queue.shift();\n      data.push(node.val);\n      if (node.left) queue.push(node.left);\n      if (node.rigth) queue.push(node.rigth);\n    }\n    return data;\n  }\n  // 깊이우선탐색(전위 우선탐색)\n  // 노드부터 방문하여 왼쪽에서 오른쪽으로 순회한다.\n  DFSpreOrder() {\n    if (!this.root) return [];\n    const data = [];\n    const travers = (node) => {\n      data.push(node.val);\n      if (node.left) travers(node.left);\n      if (node.rigth) travers(node.rigth);\n      return undefined;\n    };\n    travers(this.root);\n    return data;\n  }\n  // 후위 우선탐색\n  // 노드를 나중에 방문하고 그전에 왼쪽 마지막 브랜치 부터 순회한다.\n  DFSpostORder() {\n    if (!this.root) return [];\n    const data = [];\n    const travers = (node) => {\n      if (node.left) travers(node.left);\n      if (node.rigth) travers(node.rigth);\n      return data.push(node.val);\n    };\n    travers(this.root);\n    return data;\n  }\n  // 정위 탐색\n  DFSinOrder() {\n    if (!this.root) return [];\n    const data = [];\n    // 15\n    const travers = (node) => {\n      if (node.left) travers(node.left);\n      data.push(node.val);\n      // 15\n      if (node.rigth) travers(node.rigth);\n      return undefined;\n    };\n    travers(this.root);\n    return data;\n  }\n}\n\nconst tree = new BST();\ntree.insert(10);\n// tree.insert(6);\ntree.insert(15);\n// tree.insert(3);\n// tree.insert(4);\n// tree.insert(8);\ntree.insert(20);\ntree.insert(17);\n//     10\n//   6      15\n// 3  8    17 20\nconsole.log(tree.DFSinOrder());\n"]}